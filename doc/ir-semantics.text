# The formal language

x        variables

l        labels
v        optimization version

s ∈ l    start label

a        addresses

P ::= (v ↦ M)*             program
M ::= (s ↦ i), I
      s ∉ I                module
I ::= (l ↦ i)*             instruction stream

i ::=    instructions
| const x = e               constant variable
| mut x = e                 mutable variable
| x <- e                    assignment
| branch x l₁ l₂            conditional
| goto l                    goto
| print x                   print
| osr(e, v, l, (x = ee)*)   osr : (can be used for osr-in and osr-out)

ee ::=   extended expression
| e
| ⊥

e ::=    (simple) expressions
| lit                   literals
| x                     variables
| primop(x, ...)        primitive operation (pure)

lit ::=  litterals
| nil
| true | false
| 0 | 1 | 2 | ...

v :=     values
| lit                   literals

(Note: heap adresses are not values)

# Natural operational semantics

succ I l =
 | goto l'                                -> [l']
 | branch _ l' l''                        -> [l', l'']
 | when I = {..., l -> _, l' -> _, ...}   -> [l']
 | _                                      -> []

pred I l =
  { l' ∈ I : succ I l' = l }

E ::= (x ↦ const v | x ↦ var a | x ↦ ⊥)*  lexical environment
H ::= (l ↦ v)                             mutable heap

T ::= (lit)*                    output trace

Configuration: (T, H, E, P, I, l)

Lookup (partial) function, returns a v:
  (H,E)[x] :=
    v    if E ∋ (x ↦const v)
    H(l) if E ∋ (x ↦mut l)

Update (partial) function, returns a S:
  (H,E)[x ← v] :=
    H[E(x) ↦ v] if E ∋ (x ↦mut l)

Evaluation of simple expressions:

  eval H E x = (H,E)[x]
  eval H E lit = lit
  eval H E primop(x₁, ..., xₙ) = 〚primop〛((H,E)[x₁], ..., (H,E)[xₙ])

Evaluation of extended expressions

  eeval H E ⊥ = ⊥
  eeval H E e = eval H E e

Reduction relation
  (T, H, E, P, I, l) -> ((T, (H,E)[x]), H, E, P, I, l + 1)
    when I(l) = print x

  (T, H, E, P, I, l) -> (T, H, E, P, I, l')
    when I(l) = branch x l₁ l₂
     and l' := if (H,E)[x] then l₁ else l₂

  (T, H, E, P, I, l) -> (T, H, (E, x ↦ v), P, I, succ I l)
    when I(l) = (const x = e)
     and v := eval H E x

  (T, H, E, P, I, l) -> (T, (H, a ↦ v), (E, x ↦ a), P, I, succ I l)
    when I(l) = (mut x = e)
     and v := eval H E e
     and a fresh

  (T, H, E, P, I, l) -> (T, (H,E)[x] := v, E, P, I, succ I l)
    when I(l) = (x ← e)
     and v := eval H E x

  (T, H, E, P, I, l) -> (T, H, E, P, I, succ I l)
    when I(l) = osr(e, _, _)
     and (eval H E e) is not (true)

  (T, H, E, P, I, l) -> (T, H, E', P, I', l')
    when I(l) = osr(e, v, l', (x = ee)*)
     and (eval H E e) is (true)
     and I' := P(v)
     and E' := (x ↦ (eeval H E ee))*

# Scopes

declares i =
  | mut x _         -> [x]
  | const x _       -> [x]
  | _               -> []

requires i =
  | mut x = e
  | const x = e
  | osr (e, v, l, (x = ee)*)
                    -> vars(e) ∪ vars(ee)*
  | x <- e          -> x :: vars(e)
  | branch x _
  | print x         -> [x]
  | _               -> []

scope S ::= x*
scope assignment A ::= ((v, l) → S)*

## Declarative scoping judgment

This judgment just classifies "possible" scope assignments A for
a program P. It does not characterize the tightest possible
assignment¹, as it allows to implicitly drop variables from scope on
each transition (the ⊇ relations in the (v, l → i) rule). In
particular, it cannot forbid shadowing, as it is always possible to
drop all same-named bindings before a declaration.

¹: the tightest possible assignment can be defined impredicatively as
the pointwise intersection of all valid judgments, which is
well-defined given that valid scopes are bounded by the set of
variables defined in the program.

  ∀(v → M) ∈ P,   A, P ⊨ v → M
  ----------------------------
            A, P ⊨

  ∀(l → i) ∈ M,   A, P ⊨ v, l → i
  -------------------------------
         A, P ⊨ v → M

  S := A(v,l)
  requires i ⊆ S
  ∀l* ∈ pred(P(v),l), A(v,l*) ⊇ S
  ∀l' ∈ succ(P(v),l), S ∪ declares i ⊇ A(v,l')
  A, P ⊨ i : S
  ----------------------------------------
  A, P ⊨ v, l → i

The judgment (A, P ⊢ i : S) below is the instruction-specific judgment
that checks the scope restrictions that are specific to each
instruction, rather than the general control-flow constraints and the
generic requires/declares handling.

  ----------------
  A, P ⊨ start : ∅

              A(v, l) = x*
  ----------------------------------
  A, P ⊨ osr(e, v, l, (x = ee*)) : S

  ---------------
  A, P ⊨ stop : ∅


## Algorithmic scoping judgment

(A, P ⊨), (A, P ⊨ v → M), (A, P ⊢ i : S): as in the declarative
scoping judgment. Only (A, P ⊨ v, l → i) differs.

  S := A(v,l) \ declares i
  ∀l* ∈ pred(P(v),l), A(v,l*) ⊇ S ∪ requires i
  A, P ⊨ i : S
  --------------------------------------------
  A, P ⊨ v, l → i

There is a fundamental difference in the role of the scope assignment
A between the declarative and algorithmic judgments.

In the declarative judgment, A(v,l) points to the *ingoing* scope
of the instruction at location (v,l): the scope that is available when
arriving to the instruction from a predecessor. The scope available to
the successors is computed from this value as (A(v,l) ∪ declares i).

In the algorithmic judgment, S := A(v,l) points to the *outgoing*
scope of the instruction at location (v,l): the scope that is avaiable
when leaving the instruction to a successor. The scope visible on
entering the instruction is (A(v,l) \ declares i) *if* shadowing is
forbidden (otherwise it may contain any subset of the (declares i)).
