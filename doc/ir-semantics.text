# The formal language

  P ::= Function main ()  ↦ F, (Df ↦ F)*   program:            main function and other functions
  F ::= (lᵥ ↦ V)*                          function body:      can contain multiple versions
  V ::= start ↦ i, I                       a function version: instruction stream with dedicated start
  I ::= (l ↦ i)*                           instruction stream: labeled instructions

Df ::= Function f (formal*)              function declaration (signature)

  x        variables

  f  function name
  l  branch label
  lᵥ version label

Reserved Names:
  main      main function    (execution of program starts here)
  start     start label      (execution of function starts here)

  formal ::=      formal argument
  | const x
  | mut x

  a  addresses

  i ::=    instructions
  | const x = e                   constant variable
  | mut x = e                     mutable variable
  | drop x                        drop a variable from scope
  | clear x                       de-initialization of a mutable
  | x <- e                        assignment
  | x[e] <- e                     array assignment
  | branch e l₁ l₂                conditional
  | goto l                        goto
  | print e                       print
  | return e                      return
  | call x = e (arg*)             function call
  | osr(e, f, lᵥ, l, osr-map*)    osr : (can be used for osr-in and osr-out)

  arg ::= e | &x

A function argument is either an arbitrary expression `x` or `&x`,
which references a mutable variable `x`; the function declaration is
expecting a mutable variable `mut y` in this position, and `y` is
aliased to `x` from the caller environment; in particular, any
mutation of `y` within the function body will be visible on `x` after
the function has returned.

  e ::=     expression
  | se                    simple expression
  | primop(se*)           primitive operation (pure)
  | array(se)             empty array constructor
  | [se*]                 array constructor
  | x[se]                 array index
  | length(x)             array length

  se ::=    simple expressions
  | lit                   literals
  | x                     variables
  | 'f                    create function reference

  lit ::=  literals
  | nil
  | true | false
  | 0 | 1 | 2 | ...

  v :=     values
  | lit                   literals
  | f                     function reference
  | [v*]                  array

Note: heap adresses are not values. They cannot be explicitly
mentioned, but &x can be used to alias the mutable variable x in an
osr or function call.

  osr-map ::=    osr mapping declaration
  | const x = e
  | mut x
  | mut x = &x
  | mut x = e

# Natural operational semantics

  E ::= (x ↦ val v | x ↦ ref a | x ↦ ⊥)*  lexical environment
  H ::= (a ↦ v)                           mutable heap

  T ::= (lit)*                    output trace

## Configuration

  C ::= (x, E, I, l)                 continuation:  accumulator, environment, instructions, label

  M ::= (P, C*) : (I, T, H, E, l)    machine state: program, continuations : instructions, trace, heap, environment, pc

## Auxiliary functions

  succ I l =
   | goto l'                                -> [l']
   | branch _ l' l''                        -> [l', l'']
   | when I = {..., l -> _, l' -> _, ...}   -> [l']
   | _                                      -> []

  pred I l =
    { l' ∈ I : succ I l' = l }

Lookup (partial) function, returns a v:

  (H,E)[x] :=
    v    if E ∋ (x ↦ val v)
    H(a) if E ∋ (x ↦ ref a)

Update (partial) function, returns an H:

  (H,E)[x ← v] :=
    H[a ↦ v] if E ∋ (x ↦ ref a)

## Evaluation of (simple) expressions:

  simple-eval P H E x   = (H,E)[x]
  simple-eval P H E lit = lit
  simple-eval P H E 'f  = f
    where Df ∈ dom P
      and Df  = Function f (formal*)

  eval P H E se          = simple-eval P H E se
  eval P H E primop(se*) = 〚primop〛(v*)
    where (v := simple-eval P H E se)*
  eval P H E [se*]       = [v*]
    where (v := simple-eval P H E se)*
  eval P H E x[se]       = vₙ
    where v := (H,E)[x]
      and n := simple-eval P H E se
      and v  = [v₁..., vₙ, ...]
  eval P H E array(se)   = [nil⁽ⁿ⁾]
    where n := simple-eval P H E se
  eval P H E length(x)   = n
    where v := (H,E)[x]
      and v  = [v₁..., vₙ]

## Environment actions (variable binding, function call, osr)

`build-env H E def` builds a new heap/environment *fragment* from
a definition intepreted in the existing context (H,E).

  build-env H E (const x = e) = (∅, [x ↦ val v])
    where v := eval P H E e
  build-env H E (mut x)       = ([a ↦ ⊥], [x ↦ ref a])
    where a fresh
  build-env H E (mut x = e)   = ([a ↦ v], [x ↦ ref a])
    where a fresh
      and v := eval P H E e
  build-env H E (mut x = &y)  = (∅, [x ↦ ref a])
    where E ∋ (y ↦ ref a)

`extend-env H E def` extends the runtime context `(H,E)` with the
fragment generated from `def` – in particular it returns an extended
lexical environment `E'`.

  extend-env H E def := (H, E) + build-env H E def

`replace-env H E def*` creates a new lexical environment `E'` from
scratch (it does not extend the input environment `E`) from the list
of definitions `def*`, interpreted/evaluated in `E`. The heap `H` is
extended with the new heap fragment into a new heap `H'`.

  replace-env H E def* := (H, ∅) + (build-env H E def)*

## One step reduction

  step   (const x = e) (P, I, T, H, E, l)
       = (I, T, H', E', succ I l)
   where (H', E') := extend-env H E (const x = e)

  step   (mut x = e) (P, I, T, H, E, l)
       = (I, T, H', E', succ I l)
   where (H', E') := extend-env H E (mut x = e)

  step   (x ← e) (P, I, T, H, E, l)
       = (I, T, (H,E)[x ← v], E, succ I l)
    when v := eval P H E e

  step   (clear x) (P, I, T, H, E, l)
       = (I, T, (H,E)[x ← ⊥], E, succ I l)
    when v := eval P H E e

  step   (drop x) (P, I, T, H, E, l)
       = (I, T, H, E', succ I l)
    when E' := E \ {x}

  step   (x[eᵢ] ← eₐ) (P, I, T, H, E, l)
       = (I, T, (H,E)[x ← v'], E, succ I l)
    when n  := eval P H E eᵢ
     and vₐ := eval P H E eₐ
     and v  := (H,E)[x]
     and v   = [v₁..., vₙ, ...]
     and v' := [v₁..., vₐ, ...]

  step   (print e) (P, I, T, H, E, l)
       = (I, (T, v), H, E, succ I l)
    when v := eval P H E e

  step   (branch e l₁ l₂) (P, I, T, H, E, l)
       = (I, T, H, E, l')
    when v  := eval P H E e
     and l' := if v = true  then l₁
               if v = false then l₂

  step   osr(e, f^, lᵥ^, l^, (osr-map*)) (P, I, T, H, E, l)
       = (I', T, H', E', l')
    when v := eval P H E e
     and if v = false then
         I' := I
         l' := l
         H' := H
         E' := E
     and if v = true then
         Df ∈ dom P
         Df  = Function f^ (formal*)
         I' := P(Df, lᵥ^)
         l' := l^
         (H', E') := replace-env osr-map

## Reduction relation '-->'

  (P, C*) : (I, T, H, E, l) --> (P, C*) : step I(l) (P, I, T, H, E, l)

  (P, C*) : (I, T, H, E, l) --> (P, (C*, C')) : (I', T, H', E', start)
    when I(l) = (call x = e (arg*))
     and f  := eval P H E e
     and Df ∈ dom P
     and Df  = Function f ((mod y)*)
     and I' := hd P(Df)
     and (H',E') := replace-env H E (mod y = arg)*
     and C' := (x, E, I, succ I l)

  (P, (C*, C')) : (I, T, H, E, l) --> (P, C*) : (I', T, H, E'', l')
    when I(l) = (return e)
     and v   := eval P H E e
     and C'   = (x', E', I', l')
     and E'' := E'[x' ↦ v]

# Scopes

declares i =
  | mut x _         -> [x]
  | const x _       -> [x]
  | _               -> []

requires i =
  | mut x = e
  | const x = e
  | osr (e, f, lᵥ, l, (x = ee)*)
                    -> vars(e) ∪ vars(ee)*
  | x <- e          -> x :: vars(e)
  | branch x _
  | print x         -> [x]
  | _               -> []

scope S ::= x*
scope assignment A ::= ((v, l) → S)*

## Declarative scoping judgment

This judgment just classifies "possible" scope assignments A for
a program P. It does not characterize the tightest possible
assignment¹, as it allows to implicitly drop variables from scope on
each transition (the ⊇ relations in the (v, l → i) rule). In
particular, it cannot forbid shadowing, as it is always possible to
drop all same-named bindings before a declaration.

¹: the tightest possible assignment can be defined impredicatively as
the pointwise intersection of all valid judgments, which is
well-defined given that valid scopes are bounded by the set of
variables defined in the program.

  ∀(v → M) ∈ P:   A, P ⊨d v → M
  ----------------------------
            A, P ⊨d

  ∀(l → i) ∈ M:   A, P ⊨d v, l → i
  -------------------------------
         A, P ⊨d v → M

  requires i ⊆ A(v,l)
  ∀l' ∈ succ(P(v),l),  A(v,l) ∪ declares i ⊇ A(v,l')
  A, P ⊨d i : A(v,l)
  pred(P(v), l) = ∅  ⇒  i = start
  -----------------------------------------------------------
  A, P ⊨d v, l → i

The judgment (A, P ⊨d i : S) below is the instruction-specific judgment
that checks the scope restrictions that are specific to each
instruction, rather than the general control-flow constraints and the
generic requires/declares handling.

  -----------------
  A, P ⊨d start : ∅

              A(v', l') = x*
  -------------------------------------
  A, P ⊨d osr(e, f, lᵥ', l', (x = ee*)) : S

  ---------------
  A, P ⊨d stop : ∅

  i ∉ {start, osr, stop}
  ----------------------
  A, P ⊨d i : S

## Algorithmic scoping judgment

(A, P ⊨a), (A, P ⊨a v → M), (A, P ⊨a i : S): as in the declarative
scoping judgment. Only (A, P ⊨a v, l → i) differs.

  S := A(v,l) \ declares i
  (⋂_{l* ∈ pred(P(v),l)} A(v,l*)) = S ∪ requires i
  A, P ⊨a i : S
  ------------------------------------------------
  A, P ⊨a v, l → i

There is a fundamental difference in the role of the scope assignment
A between the declarative and algorithmic judgments.

In the declarative judgment, A(v,l) points to the variables
*available* in the *ingoing* scope of the instruction at location
(v,l): the scope that is available when arriving to the instruction
from a predecessor. The variables that are available in the outgoing
scope can be computed from this value as (A(v,l) ∪ declares i).

In the algorithmic judgment, A(v,l) points to the variables that are
*required* in the *outgoing* scope of the instruction at location
(v,l): the scope that is required when leaving the instruction to
a successor. The variables required in the ingoing scope can be
computed from this value as (A(v,l) \ declares i).

In the declarative judgment, the relation between an instruction scope
and its neighbors is under-specified: a predecessor's outgoing scope
may have more variables than our ingoing scope, and any successor's
ingoing scope may have less variable than our outgoing scope.

In the algorithmic judgment, the relation between the scopes of an
instruction and its neighbors is deterministic: an instruction's
ingoing scope is exactly the variables that are common among all its
predecessors. Implicitly dropping a variable that will never be used
again is possible: this is done by choosing a A(v,l) that is smaller
than the instruction's ingoing set plus (declares i).

Problem: I think there is a problem with the notion of outgoing scope
as it is currently defined for multi-successor instructions, as it
forces all successors to see the same set of required
variables. I think that introducing `drop` instructions would be the
cleanest way to work around these issues – by removing any
underspecification from the declarative specification.
