# The formal language

x        variables

l        labels
v        optimization version

s ∉ l    start label

a        addresses

C ::= (v ↦ P)*             compilation unit
P ::= s ↦ i, (l ↦ i)*      program

i ::=    instructions
| const x = e               constant variable
| mut x = e                 mutable variable
| x <- e                    assignment
| branch x l₁ l₂            conditional
| goto l                    goto
| print x                   print
| osr(e, v, l, (x = ee)*)   osr : (can be used for osr-in and osr-out)

ee ::=   extended expression
| e
| ⊥

e ::=    (simple) expressions
| lit                   literals
| x                     variables
| primop(x, ...)        primitive operation (pure)

lit ::=  litterals
| nil
| true | false
| 0 | 1 | 2 | ...

v :=     values
| lit                   literals

(Note: heap adresses are not values)

# Natural operational semantics

succ P l =
 | goto l'                                -> [l']
 | branch _ l' l''                        -> [l', l'']
 | when P = {..., l -> _, l' -> _, ...}   -> [l']
 | _                                      -> []

pred P l =
  { l' ∈ P : succ P l' = l }

E ::= (x ↦const v | x ↦var a | x ↦⊥)*  lexical environment
H ::= (l ↦ v)                          mutable heap

T ::= (lit)*                    output trace
Configuration: (T, H, E, C, P, l)

Lookup (partial) function, returns a v:
  (H,E)[x] :=
    v    if E ∋ (x ↦const v)
    H(l) if E ∋ (x ↦mut l)

Update (partial) function, returns a S:
  (H,E)[x ← v] :=
    H[E(x) ↦ v] if E ∋ (x ↦mut l)

Evaluation of simple expressions:

  eval H E x = (H,E)[x]
  eval H E lit = lit
  eval H E primop(x₁, ..., xₙ) = 〚primop〛((H,E)[x₁], ..., (H,E)[xₙ])

Reduction relation
  (T, H, E, C, P, l) -> ((T, (H,E)[x]), H, E, C, P, l + 1)
    when P(l) = print x

  (T, H, E, C, P, l) -> (T, H, E, C, P, l')
    where P(l) = branch x l₁ l₂
      and l' := if (H,E)[x] then l₁ else l₂

  (T, H, E, C, P, l) -> (T, H, (E, x ↦ v), C, P, succ l)
    when P(l) = (const x = e)
     and v := eval H E x

  (T, H, E, C, P, l) -> (T, (H, a ↦ v), (E, x ↦ a), C, P, succ l)
    when P(l) = (mut x = e)
     and v := eval H E e
     and a fresh

  (T, H, E, C, P, l) -> (T, (H,E)[x] := v, E, C, P, succ l)
    when P(l) = (x ← e)
     and v := eval H E x

  (T, H, E, C, P, l) -> (T, H, E, C, P, succ l)
    when P(l) = osr(e, _, _)
     and (eval H E e) is not (true)

  (T, H, E, C, P, l) -> (T, H, E', C, P', l')
    when P(l) = osr(e, v, l', (x = ee)*)
     and (eval H E e) is (true)
     and P' := C(v)
     and E' := (x ↦ ⊥ | (eval H E ee))*

# scoping rules

declares i =
  | mut x _         -> [x]
  | const x _       -> [x]
  | _               -> []

requires i =
  | mut x = e
  | const x = e
  | osr e, _        -> vars(e)
  | x <- e          -> x :: vars(e)
  | branch x _
  | print x         -> [x]
  | _               -> []


⊨(scp) P    C ⊨(osr) P
----------------------   ∀ P ∈ C
         ⊨ C


P, S ⊨(scp) l
-------------   ∀ l ∈ P : ∃ S
     ⊨(scp) P

P, S \ declares P(l) ∪ requires P(l) ⊨(scp) l*
---------------------------------------------   ∀ l* ∈ pred (P, l)
                                P, S ⊨(scp) l


-------------
P, ∅ ⊨(scp) s


C(v), x̄ ⊨(scp) l
----------------   ∀ osr(e, v, l, (x = ee)*) ∈ P
      C ⊨(osr) P
